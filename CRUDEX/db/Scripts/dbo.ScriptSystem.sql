IF (SELECT object_id('[dbo].[ScriptSystem]', 'P')) IS NULL
	EXEC('CREATE PROCEDURE [dbo].[ScriptSystem] AS PRINT 1')
GO
ALTER PROCEDURE [dbo].[ScriptSystem](@ReturnValue BIGINT OUT) AS
BEGIN
	DECLARE @ErrorMessage VARCHAR(250)

	SET NOCOUNT ON
	SET TRANSACTION ISOLATION LEVEL READ COMMITTED
	BEGIN TRY
		-- 1 [Systems]
		SELECT 	'System' AS [ClassName]
				,[Id]
				,[Name]
				,[Description]
				,[ClientName]
				,[MaxRetryLogins]
				,[IsOffAir]
			INTO [#Systems]
			FROM [dbo].[Systems]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Sistema não cadastrado', 1
		ALTER TABLE [#Systems] ADD PRIMARY KEY CLUSTERED([Id])
		-- 2 [[SystemsDatabases]]
		SELECT 	'SystemDatabase' AS [ClassName]
				,[SD].[Id]
				,[SD].[SystemId]
				,[S].[Name] AS [#SystemName]
				,[SD].[DatabaseId]
				,[D].[Name] AS [#DatabaseName]
				,[D].[ConnectionId] AS [#ConnectionId]
				,[SD].[Name]
			INTO [#SystemsDatabases]
			FROM [dbo].[SystemsDatabases] [SD]
				INNER JOIN [#Systems] [S] ON [S].[Id] = [SD].[SystemId]
				INNER JOIN [dbo].[Databases] [D] ON [D].[Id] = [SD].[DatabaseId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Sistemas x Bancos-de-dados não cadastrado(s)', 1
		ALTER TABLE [#SystemsDatabases] ADD PRIMARY KEY CLUSTERED([Id])
		-- 3 [Connections]
		SELECT [Id]
			  ,[Provider]
			  ,[HostName]
			  ,[Port]
			  ,[IntegratedSecurity]
			  ,[ConnectionTimeout]
			  ,[ExtendedProperties]
			  ,[UserID]
			  ,[Password]
			  ,[PersistSecurityInfo]
			  ,[AdditionalParameters]
		  INTO [#Connections]
		  FROM [dbo].[Connections]
		-- 4 [Databases]
		SELECT 	'Database' AS [ClassName]
				,[D].[Id]
				,[D].[ConnectionId]
				,[D].[Name]
				,[D].[Alias]
				,[D].[Description]
				,[D].[Folder]
				,[D].[IsLegacy]
				,[D].[CurrentOperationId]
			INTO [#Databases]
			FROM [dbo].[Databases] [D]
				INNER JOIN [#SystemsDatabases] [SD] ON [SD].[DatabaseId] = [D].[Id]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Banco(s)-de-dados não cadastrado(s)', 1
		ALTER TABLE [#Databases] ADD PRIMARY KEY CLUSTERED([Id])
		-- 5 [DatabasesTables]
		SELECT 'DatabaseTable' AS [ClassName]
			  ,[DT].[Id]
			  ,[DT].[DatabaseId]
			  ,[D].[Name] AS [#DatabaseName]
			  ,[D].[ConnectionId] AS [#ConnectionId]
			  ,[DT].[TableId]
			  ,[T].[Name] AS [#TableName]
			  ,[DT].[Name]
			INTO [#DatabasesTables]
			FROM [dbo].[DatabasesTables] [DT]
				INNER JOIN [#Databases] [D] ON [D].[Id] = [DT].[DatabaseId]
				INNER JOIN [dbo].[Tables] [T] ON [T].[Id] = [DT].[TableId]
		ALTER TABLE [#DatabasesTables] ADD PRIMARY KEY CLUSTERED([Id])
		-- 6 [Tables]
		SELECT	'Table' AS [ClassName]
				,[T].[Id]
				,[T].[Name]
				,[T].[Alias]
				,[T].[Description]
				,[T].[ParentTableId]
				,[PT].[Name] AS [#ParentTableName]
				,[T].[IsLegacy]
				,[T].[CurrentId]
			INTO [#Tables]
			FROM [dbo].[Tables] [T]
				INNER JOIN [#DatabasesTables] [DT] ON [DT].[TableId] = [T].[Id]
				LEFT JOIN [dbo].[Tables] [PT] ON [PT].[Id] = [T].[ParentTableId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Tabela(s) não cadastrada(s)', 1
		ALTER TABLE [#Tables] ADD PRIMARY KEY CLUSTERED([Id])
		-- 7 [Categories]
		SELECT 	'Category' AS [ClassName]
				,[C].[Id]
				,[C].[Name]
				,[C].[HtmlInputType]
				,[C].[HtmlInputAlign]
				,[C].[AskEncrypted]
				,[C].[AskMask]
				,[C].[AskListable]
				,[C].[AskDefault]
				,[C].[AskMinimum]
				,[C].[AskMaximum]
				,[C].[AskInWords]
			INTO [#Categories]
			FROM [dbo].[Categories] [C]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Categoria(s) de tipos não cadastrada(s)', 1
		ALTER TABLE [#Categories] ADD PRIMARY KEY CLUSTERED([Id])
		-- 8 [Types]
		SELECT 	'Type' AS [ClassName]
				,[T].[Id]
				,[T].[CategoryId]
				,[C].[Name] AS [#CategoryName]
				,[T].[Name]
				,[T].[Name] AS [#DataType]
				,[T].[MaxLength]
				,[T].[Minimum]
				,[T].[Maximum]
				,[T].[AskLength]
				,[T].[AskDecimals]
				,[T].[AskPrimarykey]
				,[T].[AskAutoincrement]
				,[T].[AskFilterable]
				,[T].[AskGridable]
				,[T].[AskCodification]
				,[T].[IsActive]
			INTO [#Types]
			FROM [dbo].[Types] [T]
				INNER JOIN [#Categories] [C] ON [C].[Id] = [T].[CategoryId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Tipos de domínios não cadastrados', 1
		ALTER TABLE [#Types] ADD PRIMARY KEY CLUSTERED([Id])
		-- 9 [Masks]
		SELECT 	'Mask' AS [ClassName]
				,[M].[Id]
				,[M].[Name]
				,[M].[Mask]
			INTO [#Masks]
			FROM [dbo].[Masks] [M]
		-- 10 [Domains]
		SELECT	'Domain' AS [ClassName]
				,[D].[Id]
				,[D].[TypeId]
				,[T].[Name] AS [#TypeName]
				,[C].[Name] AS [#CategoryName]
				,[T].[Name] + CASE WHEN ISNULL([D].[Length], 0) > 0 
								   THEN '(' + CAST([D].[Length] AS VARCHAR(10)) + 
										CASE WHEN ISNULL([D].[Decimals], 0) > 0 
											 THEN CAST([D].[Decimals] AS VARCHAR(10)) 
											 ELSE '' 
										END + ')'
								   ELSE ''
							  END AS [#DataType]
				,[D].[MaskId]
				,[M].[Name] AS [#MaskName]
				,[D].[Name]
				,[D].[Length]
				,[D].[Decimals]
				,[D].[ValidValues]
				,[D].[Default]
				,[D].[Minimum]
				,[D].[Maximum]
				,[D].[Codification]
			INTO [#Domains]
			FROM [dbo].[Domains] [D]
				INNER JOIN [#Types] [T] ON [T].[Id] = [D].[TypeId]
				INNER JOIN [#Categories] [C] ON [C].[Id] = [T].[CategoryId]
				LEFT JOIN [dbo].[Masks] [M] ON [M].[Id] = [D].[MaskId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Domínios de colunas não cadastrados', 1
		ALTER TABLE [#Domains] ADD PRIMARY KEY CLUSTERED([Id])
		-- 11 [Menus]
		SELECT 	'Menu' AS [ClassName]
				,[M].[Id]
				,[M].[SystemId]
				,[S].[Name] AS [#SystemName]
				,[M].[Sequence]
				,[M].[Caption]
				,[M].[Message]
				,[M].[Action]
				,[M].[ParentMenuId]
				,[PM].[Caption] AS [#ParentMenuCaption]
			INTO [#Menus]
			FROM [dbo].[Menus] [M]
				LEFT JOIN [dbo].[Menus] [PM] ON [PM].[Id] = [M].[ParentMenuId]
				INNER JOIN [#Systems] [S] ON [S].[Id] = [M].[SystemId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Menu(s) de sistema não cadastrado(s)', 1
		ALTER TABLE [#Menus] ADD PRIMARY KEY CLUSTERED([Id])
		-- 12 [SystemsUsers]
		SELECT 'SystemUser' AS [ClassName] 
			  ,[SU].[Id]
			  ,[SU].[SystemId]
			  ,[S].[Name] AS [#SystemName]
			  ,[SU].[UserId]
			  ,[U].[Name] AS [#UserName]
			  ,[SU].[Name]
			INTO [#SystemsUsers] 
			FROM [dbo].[SystemsUsers] [SU]
				INNER JOIN [#Systems] [S] ON [S].[Id] = [SU].[SystemId]
				INNER JOIN [dbo].[Users] [U] ON [U].[Id] = [SU].[UserId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Menu(s) de sistema não cadastrado(s)', 1
		ALTER TABLE [#SystemsUsers] ADD PRIMARY KEY NONCLUSTERED([Id])
		-- 13 [Users]
		SELECT 'User' AS [ClassName] 
			  ,[U].[Id]
			  ,[U].[Name]
			  ,[U].[Password]
			  ,[U].[FullName]
			  ,[U].[RetryLogins]
			  ,[U].[IsActive]
			INTO [#Users]
			FROM [dbo].[Users] [U]
				INNER JOIN [#SystemsUsers] [SU] ON [SU].[UserId] = [U].[Id]
		ALTER TABLE [#Users] ADD PRIMARY KEY CLUSTERED([Id])
		-- 14 [Columns]
		SELECT 'Column' AS [ClassName]
			  ,[C].[Id]
			  ,[C].[TableId]
			  ,[T].[Name] AS [#TableName]
			  ,[T].[Alias] AS [#TableAlias]
			  ,[C].[Sequence]
			  ,[C].[DomainId]
			  ,[D].[Name] AS [#DomainName]
			  ,[D].[#CategoryName]
			  ,[D].[#TypeName]
			  ,[D].[#DataType]
			  ,[C].[ReferenceTableId]
			  ,[RT].[Name] AS [#ReferenceTableName]
			  ,[C].[Name]
			  ,[C].[Alias]
			  ,[C].[Description]
			  ,[C].[Title]
			  ,[C].[Caption]
			  ,[C].[Default]
			  ,[C].[Minimum]
			  ,[C].[Maximum]
			  ,[C].[IsPrimarykey]
			  ,[C].[IsAutoIncrement]
			  ,[C].[IsRequired]
			  ,[C].[IsListable]
			  ,[C].[IsFilterable]
			  ,[C].[IsEditable]
			  ,[C].[IsGridable]
			  ,[C].[IsEncrypted]
			  ,[C].[IsInWords]
			INTO [#Columns]
			FROM [dbo].[Columns] [C]
				INNER JOIN [#Tables] [T] ON [T].[Id] = [C].[TableId]
				INNER JOIN [#Domains] [D] ON [D].[Id] = [C].[DomainId]
				LEFT JOIN [#Tables] [RT] ON [RT].[Id] = [C].[ReferenceTableId]
		IF @@ROWCOUNT = 0
			THROW 51000, 'Coluna(s) de tabela(s) não cadastrada(s)', 1
		ALTER TABLE [#Columns] ADD PRIMARY KEY CLUSTERED([Id])
		-- 15 [Indexes]
		SELECT 'Index' AS [ClassName]
			  ,[I].[Id]
			  ,[I].[TableId]
			  ,[T].[Name] AS [#TableName]
			  ,[I].[Name]
			  ,[I].[IsUnique]
		  INTO [#Indexes]
		  FROM [dbo].[Indexes] [I]
			INNER JOIN [#Tables] [T] ON [T].[Id] = [I].[TableId]
		ALTER TABLE [#Indexes] ADD PRIMARY KEY CLUSTERED([Id])
		-- 16 [Indexkeys]
		SELECT 'Indexkey' AS [ClassName]
			  ,[IK].[Id]
			  ,[IK].[IndexId]
			  ,[I].[Name] AS [#IndexName]
			  ,[IK].[Sequence]
			  ,[IK].[ColumnId]
			  ,[C].[Name] AS [#ColumnName]
			  ,[IK].[IsDescending]
		  INTO [#Indexkeys]
		  FROM [dbo].[Indexkeys] [IK]
			INNER JOIN [#Indexes] [I] ON [I].[Id] = [IK].[IndexId]
			INNER JOIN [#Columns] [C] ON [C].[Id] = [IK].[ColumnId]
		ALTER TABLE [#Indexkeys] ADD PRIMARY KEY CLUSTERED([Id])
		-- 17 [Logins]
		SELECT TOP 0 'Login' AS [ClassName]
					,[Id]
				    ,[SystemId]
					,[UserId]
					,[PublicKey]
					,[IsLogged]
			INTO [#Logins]
			FROM [dbo].[Logins]
		-- 18 [Transactions]
		SELECT TOP 0 'Transaction' AS [ClassName]
					,[Id]
				    ,[LoginId]
					,[IsConfirmed]
			INTO [#Transactions]
			FROM [dbo].[Transactions]
		-- 19 [Operations]
		SELECT TOP 0 'Operation' AS [ClassName]
					,[Id]
				    ,[TransactionId]
					,[TableName]
					,[ParentOperationId]
					,[Action]
					,[OriginalRecord]
					,[ActualRecord]
					,[IsConfirmed]
			INTO [#Operations]
			FROM [dbo].[Operations]
		-- 20 [Associations]
		SELECT DISTINCT 'Association' AS [ClassName]
						,[A].[Id]
						,[T1].[Name] + [T2].[Name] AS [#Name]
						,[A].[TableId1]
						,[T1].[Name] AS [#TableName1]
						,[T1].[Alias] AS [#TableAlias1]
						,[A].[TableId2]
						,[T2].[Name] AS [#TableName2]
						,[T2].[Alias] AS [#TableAlias2]
						,[A].[IsBidirectional]
			INTO [#Associations]
			FROM [dbo].[Associations] [A]
				INNER JOIN [#Tables] [T] ON [T].[Id] IN ([A].[TableId1], [A].[TableId2])
				INNER JOIN [Tables] [T1] ON [T1].[Id] = [A].[TableId1]
				INNER JOIN [Tables] [T2] ON [T2].[Id] = [A].[TableId2]
		-- 21 [Uniques]
		SELECT DISTINCT 'Unique' AS [ClassName]
						,[U].[Id]
						,[U].[ColumnId1]
						,[T1].[Name] AS [#TableName1]
						,[T1].[Alias] AS [#TableAlias1]
						,[C1].[Name] AS [#ColumnName1]
						,[U].[ColumnId2]
						,[T2].[Name] AS [#TableName2]
						,[T2].[Alias] AS [#TableAlias2]
						,[C2].[Name] AS [#ColumnName2]
						,[U].[IsBidirectional]
			INTO [#Uniques]
			FROM [dbo].[Uniques] [U]
				INNER JOIN [dbo].[#Columns] [C] ON [C].[Id] IN ([U].[ColumnId1], [U].[ColumnId2])
				INNER JOIN [dbo].[Columns] [C1] ON [C1].[Id] = [U].[ColumnId1]
				INNER JOIN [dbo].[Columns] [C2] ON [C2].[Id] = [U].[ColumnId2]
				INNER JOIN [dbo].[Tables] [T1] ON [T1].[Id] = [C1].[TableId]
				INNER JOIN [dbo].[Tables] [T2] ON [T2].[Id] = [C2].[TableId]

		SELECT * FROM [#Categories]
		SELECT * FROM [#Types]
		SELECT * FROM [#Masks]
		SELECT * FROM [#Domains]
		SELECT * FROM [#Systems]
		SELECT * FROM [#Menus] ORDER BY [SystemId], [Sequence]
		SELECT * FROM [#Users]
		SELECT * FROM [#SystemsUsers]
		SELECT * FROM [#Connections]
		SELECT * FROM [#Databases]
		SELECT * FROM [#SystemsDatabases]
		SELECT * FROM [#Tables]
		SELECT * FROM [#DatabasesTables]
		SELECT * FROM [#Columns] ORDER BY [TableId], [Sequence]
		SELECT * FROM [#Indexes]
		SELECT * FROM [#Indexkeys] ORDER BY [IndexId], [Sequence]
		SELECT * FROM [#Logins]
		SELECT * FROM [#Transactions]
		SELECT * FROM [#Operations]
		SELECT * FROM [#Associations]
		SELECT * FROM [#Uniques]

	END TRY
	BEGIN CATCH
        SET @ErrorMessage = '[' + ERROR_PROCEDURE() + ']: ' + ERROR_MESSAGE() + ', Line: ' + CAST(ERROR_LINE() AS NVARCHAR(10));
        THROW 51000, @ErrorMessage, 1
	END CATCH
END
GO
